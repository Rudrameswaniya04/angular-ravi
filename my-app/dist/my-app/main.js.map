{"version":3,"sources":["./src/app/components/employee-list/employee-list.component.ts","./src/app/components/employee-list/employee-list.component.html","./src/app/components/signup/signup.component.ts","./src/app/components/signup/signup.component.html","./src/app/components/employee-create/employee-create.component.ts","./src/app/components/employee-create/employee-create.component.html","./src/environments/environment.ts","./src/app/service/api.service.ts","./src/app/shared/auth.service.ts","./src/app/components/employee-edit/employee-edit.component.ts","./src/app/components/employee-edit/employee-edit.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/signin/signin.component.ts","./src/app/components/signin/signin.component.html","./src/app/app.module.ts","./src/app/shared/authconfig.interceptor.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from './../../service/api.service';\r\n\r\n@Component({\r\n  selector: 'app-employee-list',\r\n  templateUrl: './employee-list.component.html',\r\n  styleUrls: ['./employee-list.component.css']\r\n})\r\n\r\nexport class EmployeeListComponent implements OnInit {\r\n  \r\n  Employee:any = [];\r\n\r\n  constructor(private apiService: ApiService) { \r\n    this.readEmployee();\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  readEmployee(){\r\n    this.apiService.getEmployees().subscribe((data) => {\r\n     this.Employee = data;\r\n     console.warn(data);\r\n    })    \r\n  }\r\n\r\n  removeEmployee(employee, index) {\r\n    if(window.confirm('Are you sure?')) {\r\n        this.apiService.deleteEmployee(employee._id).subscribe((data) => {\r\n          this.Employee.splice(index, 1);\r\n        }\r\n      )    \r\n    }\r\n  }\r\n\r\n}","<div class=\"container\">\r\n  <!-- No data message -->\r\n  <p *ngIf=\"Employee.length <= 0\" class=\"no-data text-center\">There is no employee added yet!</p>\r\n\r\n  <!-- Employee list -->\r\n  <table class=\"table table-bordered\" *ngIf=\"Employee.length > 0\">\r\n    <thead class=\"table-success\">\r\n      <tr>\r\n        <th scope=\"col\">Employee ID</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">DOB</th>\r\n        <th scope=\"col\">Address</th>\r\n        <th scope=\"col\">Role</th>\r\n        <th scope=\"col\">Salary</th>\r\n        <th scope=\"col\">Experience</th>\r\n        <th scope=\"col center\">Update</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let employee of Employee; let i = index\">\r\n        <th scope=\"row\">{{employee._id}}</th>\r\n        <td>{{employee.name}}</td>\r\n        <td>{{employee.dob}}</td>\r\n        <td>{{employee.address}}</td>\r\n        <td>{{employee.role}}</td>\r\n        <td>{{employee.salary}}</td>\r\n        <td>{{employee.experience}}</td>\r\n        <td class=\"text-center edit-block\">\r\n          <span class=\"edit\" [routerLink]=\"['/edit-employee/', employee._id]\">\r\n            <button type=\"button\" class=\"btn btn-success btn-sm\">Edit</button>\r\n          </span>\r\n          <span class=\"delete\" (click)=\"removeEmployee(employee, i)\">\r\n            <button type=\"button\" class=\"btn btn-danger btn-sm\">Delete</button>\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\nimport { AuthService } from './../../shared/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\n\nexport class SignupComponent implements OnInit {\n  signupForm: FormGroup;\n\n  constructor(\n    public fb: FormBuilder,\n    public authService: AuthService,\n    public router: Router\n  ) {\n    this.signupForm = this.fb.group({\n      name: [''],\n      email: [''],\n      mobile: [''],\n      password: ['']\n    })\n  }\n\n  ngOnInit() { }\n\n  registerUser() {\n    this.authService.signUp(this.signupForm.value).subscribe((res) => {\n      if (res.result) {\n        this.signupForm.reset()\n        this.router.navigate(['log-in']);\n      }\n    })\n  }\n}","<div class=\"row justify-content-center\">\n    <div class=\"col-md-4 register-employee\">\n        <!-- form card register -->\n        <div class=\"card\">\n            <div class=\"auth-wrapper\">\n                <form class=\"form-signin\" [formGroup]=\"signupForm\" (ngSubmit)=\"registerUser()\">\n                    <div class=\"card-header\">\n                        <h3 class=\"h3 mb-3 font-weight-normal text-center\">Please sign up</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"form-group\">\n                            <label>Name</label>\n                            <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Enter name\"\n                                required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Email address</label>\n                            <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Enter email\"\n                                required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Password</label>\n                            <input type=\"password\" class=\"form-control\" formControlName=\"password\"\n                                placeholder=\"Password\" required>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-block btn-primary\">Sign up</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>","import { Router } from '@angular/router';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from './../../shared/auth.service';\r\nimport { ApiService } from './../../service/api.service';\r\nimport { Component, OnInit, NgZone } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-employee-create',\r\n  templateUrl: './employee-create.component.html',\r\n  styleUrls: ['./employee-create.component.css']\r\n})\r\n\r\nexport class EmployeeCreateComponent implements OnInit {  \r\n  currentUser: Object = {};\r\n  submitted = false;\r\n  employeeForm: FormGroup;\r\n  EmployeeProfile:any = ['HR', 'Developer', 'Tester','Analitycs']\r\n  \r\n  constructor(\r\n    public authService: AuthService,\r\n    private actRoute: ActivatedRoute,\r\n    public fb: FormBuilder,\r\n    private router: Router,\r\n    private ngZone: NgZone,\r\n    private apiService: ApiService\r\n  ) { \r\n    let id = this.actRoute.snapshot.paramMap.get('id');\r\n    this.authService.getUserProfile(id).subscribe(res => {\r\n      this.currentUser = res.msg;\r\n    })\r\n    this.mainForm();\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n  mainForm() {\r\n    this.employeeForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      dob: ['', [Validators.required]],\r\n      address: ['', [Validators.required]],\r\n      role: ['', [Validators.required]],\r\n      salary: ['', [Validators.required]],\r\n      experience: ['', [Validators.required]],\r\n    })\r\n  }\r\n\r\n  // Choose designation with select dropdown\r\n  updateProfile(e){\r\n    this.employeeForm.get('role').setValue(e, {\r\n      onlySelf: true\r\n    })\r\n  }\r\n\r\n  // Getter to access form control\r\n  get myForm(){\r\n    return this.employeeForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (!this.employeeForm.valid) {\r\n      return false;\r\n    } else {\r\n      this.apiService.createEmployee(this.employeeForm.value).subscribe(\r\n        (res) => {\r\n          console.log('Employee successfully created!')\r\n          this.ngZone.run(() => this.router.navigateByUrl('/employees-list'))\r\n        }, (error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"row justify-content-center\">\r\n  <div class=\"col-md-4 register-employee\">\r\n    <!-- form card register -->\r\n\r\n\r\n    <div class=\"card-body\">\r\n      <form [formGroup]=\"employeeForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n          <label for=\"inputName\">Name</label>\r\n          <input class=\"form-control\" type=\"text\" formControlName=\"name\">\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.name.errors?.required\">\r\n            Name is required.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"inputDOB\">Date of Birth</label>\r\n          <input class=\"form-control\" type=\"date\" formControlName=\"dob\">\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.dob.errors?.required\">\r\n            Enter your date of birth.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"inputAddress\">Address</label>\r\n          <textarea cols=\"30\" rows=\"5\" class=\"form-control\" formControlName=\"address\"></textarea>\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.address.errors?.required\">\r\n            Enter your address.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"inputPassword3\">Role</label>\r\n          <select class=\"custom-select form-control\" (change)=\"updateProfile($event.target.value)\"\r\n            formControlName=\"role\">\r\n            <option value=\"\">Choose role...</option>\r\n            <option *ngFor=\"let employeeProfile of EmployeeProfile\" value=\"{{employeeProfile}}\">{{employeeProfile}}\r\n            </option>\r\n          </select>\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.role.errors?.required\">\r\n            Choose role.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"inputVerify3\">salary</label>\r\n          <input class=\"form-control\" type=\"text\" formControlName=\"salary\">\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.salary.errors?.required\">\r\n            Enter your salary.\r\n          </div>\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.salary.errors?.pattern\">\r\n            Enter Numbers Only\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"inputVerify3\">Experience</label>\r\n          <input class=\"form-control\" type=\"text\" formControlName=\"experience\">\r\n          <!-- error -->\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.experience.errors?.required\">\r\n            Enter your experience.\r\n          </div>\r\n          <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.experience.errors?.pattern\">\r\n            Enter Numbers Only\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <button class=\"btn btn-success btn-lg btn-block\" type=\"submit\">Register</button>\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n  </div><!-- form card register -->\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class ApiService {\r\n  \r\n  baseUri:string = 'http://localhost:4000/api';\r\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Create\r\n  createEmployee(data): Observable<any> {\r\n    let url = `${this.baseUri}/create`;\r\n    return this.http.post(url, data)\r\n      .pipe(\r\n        catchError(this.errorMgmt)\r\n      )\r\n  }\r\n\r\n  // Get all employees\r\n  getEmployees() {\r\n    return this.http.get(`${this.baseUri}`);\r\n  }\r\n\r\n  // Get employee\r\n  getEmployee(id): Observable<any> {\r\n    let url = `${this.baseUri}/read/${id}`;\r\n    return this.http.get(url, {headers: this.headers}).pipe(\r\n      map((res: Response) => {\r\n        return res || {}\r\n      }),\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Update employee\r\n  updateEmployee(id, data): Observable<any> {\r\n    let url = `${this.baseUri}/update/${id}`;\r\n    return this.http.put(url, data, { headers: this.headers }).pipe(\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Delete employee\r\n  deleteEmployee(id): Observable<any> {\r\n    let url = `${this.baseUri}/delete/${id}`;\r\n    return this.http.delete(url, { headers: this.headers }).pipe(\r\n      catchError(this.errorMgmt)\r\n    )\r\n  }\r\n\r\n  // Error handling \r\n  errorMgmt(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}","import { Injectable } from '@angular/core';\nimport { User } from './user';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  endpoint: string = 'http://localhost:4000/api';\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  currentUser = {};\n\n  constructor(\n    private http: HttpClient,\n    public router: Router\n  ) {\n  }\n\n  // Sign-up\n  signUp(user: User): Observable<any> {\n    let api = `${this.endpoint}/register-user`;\n    return this.http.post(api, user)\n      .pipe(\n        catchError(this.handleError)\n      )\n  }\n\n  // Sign-in\n  signIn(user: User) {\n    return this.http.post<any>(`${this.endpoint}/signin`, user)\n      .subscribe((res: any) => {\n        localStorage.setItem('access_token', res.token)\n        this.getUserProfile(res._id).subscribe((res) => {\n          this.currentUser = res;\n          this.router.navigate(['user-profile/' + res.msg._id]);\n        })\n      })\n  }\n\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  get isLoggedIn(): boolean {\n    let authToken = localStorage.getItem('access_token');\n    return (authToken !== null) ? true : false;\n  }\n\n  doLogout() {\n    let removeToken = localStorage.removeItem('access_token');\n    if (removeToken == null) {\n      this.router.navigate(['log-in']);\n    }\n  }\n\n  // User profile\n  getUserProfile(id): Observable<any> {\n    let api = `${this.endpoint}/user-profile/${id}`;\n    return this.http.get(api, { headers: this.headers }).pipe(\n      map((res: Response) => {\n        return res || {}\n      }),\n      catchError(this.handleError)\n    )\n  }\n\n  // Error \n  handleError(error: HttpErrorResponse) {\n    let msg = '';\n    if (error.error instanceof ErrorEvent) {\n      // client-side error\n      msg = error.error.message;\n    } else {\n      // server-side error\n      msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(msg);\n  }\n}","import { Employee } from './../../model/Employee';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ApiService } from './../../service/api.service';\r\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-employee-edit',\r\n  templateUrl: './employee-edit.component.html',\r\n  styleUrls: ['./employee-edit.component.css']\r\n})\r\n\r\nexport class EmployeeEditComponent implements OnInit {\r\n  submitted = false;\r\n  editForm: FormGroup;\r\n  employeeData: Employee[];\r\n  EmployeeProfile:any = ['HR', 'Developer', 'Tester','Analitycs'];\r\n\r\n  constructor(\r\n    public fb: FormBuilder,\r\n    private actRoute: ActivatedRoute,\r\n    private apiService: ApiService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.updateEmployee();\r\n    let id = this.actRoute.snapshot.paramMap.get('id');\r\n    this.getEmployee(id);\r\n    this.editForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      dob: ['', [Validators.required]],\r\n      address: ['', [Validators.required]],\r\n      role: ['', [Validators.required]],\r\n      salary: ['', [Validators.required]],\r\n      experience: ['', [Validators.required]],\r\n    })\r\n  }\r\n\r\n  // Choose options with select-dropdown\r\n  updateProfile(e) {\r\n    this.editForm.get('role').setValue(e, {\r\n      onlySelf: true\r\n    })\r\n  }\r\n\r\n  // Getter to access form control\r\n  get myForm() {\r\n    return this.editForm.controls;\r\n  }\r\n\r\n  getEmployee(id) {\r\n    this.apiService.getEmployee(id).subscribe(data => {\r\n      this.editForm.setValue({\r\n        name: data['name'],\r\n        dob: data['dob'],\r\n        role: data['role'],\r\n        address: data['address'],\r\n        salary: data['salary'],\r\n        experience: data['experience'],\r\n      });\r\n    });\r\n  }\r\n\r\n  updateEmployee() {\r\n    this.editForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      dob: ['', [Validators.required]],\r\n      address: ['', [Validators.required]],\r\n      role: ['', [Validators.required]],\r\n      salary: ['', [Validators.required]],\r\n      experience: ['', [Validators.required]],\r\n      \r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    if (!this.editForm.valid) {\r\n      return false;\r\n    } else {\r\n      if (window.confirm('Are you sure?')) {\r\n        let id = this.actRoute.snapshot.paramMap.get('id');\r\n        this.apiService.updateEmployee(id, this.editForm.value)\r\n          .subscribe(res => {\r\n            this.router.navigateByUrl('/employees-list');\r\n            console.log('Content updated successfully!')\r\n          }, (error) => {\r\n            console.log(error)\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n}","<div class=\"row justify-content-center\">\r\n  <div class=\"col-md-4 register-employee\">\r\n    <!-- form card register -->\r\n    <div class=\"card card-outline-secondary\">\r\n      <div class=\"card-header\">\r\n        <h3 class=\"mb-0\">Edit Employee</h3>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"inputName\">Name</label>\r\n            <input class=\"form-control\" type=\"text\" formControlName=\"name\">\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.name.errors?.required\">\r\n              Name is required.role\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"inputDOB\">Date of Birth</label>\r\n            <input class=\"form-control\" type=\"date\" formControlName=\"dob\">\r\n            <!-- error -->\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.dob.errors?.required\">\r\n              Enter your date of birth.\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"inputAddress\">Address</label>\r\n            <textarea cols=\"30\" rows=\"5\" class=\"form-control\" formControlName=\"address\"></textarea>\r\n            <!-- error -->\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.address.errors?.required\">\r\n              Enter your address.\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"inputPassword3\">Role</label>\r\n            <select class=\"custom-select form-control\" (change)=\"updateProfile($event.target.value)\"\r\n              formControlName=\"role\">\r\n              <option value=\"\">Choose role...</option>\r\n              <option *ngFor=\"let employeeProfile of EmployeeProfile\" value=\"{{employeeProfile}}\">{{employeeProfile}}\r\n              </option>\r\n            </select>\r\n            <!-- error -->\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.role.errors?.required\">\r\n              Choose role.\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"inputVerify3\">salary</label>\r\n            <input class=\"form-control\" type=\"text\" formControlName=\"salary\">\r\n            <!-- error -->\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.salary.errors?.required\">\r\n              Enter your salary.\r\n            </div>\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.salary.errors?.pattern\">\r\n              Enter Numbers Only\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <label for=\"inputVerify3\">Experience</label>\r\n            <input class=\"form-control\" type=\"text\" formControlName=\"experience\">\r\n            <!-- error -->\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.experience.errors?.required\">\r\n              Enter your experience.\r\n            </div>\r\n            <div class=\"invalid-feedback\" *ngIf=\"submitted && myForm.experience.errors?.pattern\">\r\n              Enter Numbers Only\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group\">\r\n            <button class=\"btn btn-success btn-lg btn-block\" type=\"submit\">Update</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div><!-- form  -->\r\n  </div>\r\n</div>","import { Component } from '@angular/core';\r\nimport { AuthService } from './shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'EmployeesManage';\r\n  constructor(public authService: AuthService) { }\r\n\r\n  logout() {\r\n    this.authService.doLogout()\r\n  }\r\n}\r\n","<div class=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\r\n  <h5 class=\"my-0 mr-md-auto font-weight-normal\">Emplyoees</h5>\r\n  <nav class=\"my-2 my-md-0 mr-md-3\">\r\n    <a *ngIf=\"this.authService.isLoggedIn\" class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/employees-list\">View Employees</a>\r\n  </nav>\r\n  <a *ngIf=\"this.authService.isLoggedIn\" class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/create-employee\">Add Employee</a>\r\n\r\n  <a *ngIf=\"!this.authService.isLoggedIn\" class=\"p-2 text-dark\" routerLinkActive=\"active\" routerLink=\"/log-in\">Sign\r\n    in</a>\r\n  <a *ngIf=\"!this.authService.isLoggedIn\" class=\"btn btn-outline-primary\" routerLinkActive=\"active\"\r\n    routerLinkActive=\"active\" routerLink=\"/sign-up\">Sign up</a>\r\n  <button (click)=\"logout()\" *ngIf=\"this.authService.isLoggedIn\" type=\"button\" class=\"btn btn-danger\">Logout</button>\r\n\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from \"@angular/forms\";\nimport { AuthService } from './../../shared/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css']\n})\n\nexport class SigninComponent implements OnInit {\n  signinForm: FormGroup;\n\n  constructor(\n    public fb: FormBuilder,\n    public authService: AuthService,\n    public router: Router\n  ) {\n    this.signinForm = this.fb.group({\n      email: [''],\n      password: ['']\n    })\n  }\n\n  ngOnInit() { }\n\n  loginUser() {\n    this.authService.signIn(this.signinForm.value)\n  }\n}","<div class=\"row justify-content-center\">\n    <div class=\"col-md-4 register-employee\">\n        <!-- form card register -->\n        <div class=\"card\" *ngIf=\"!this.authService.isLoggedIn\">\n            <div class=\"auth-wrapper\">\n                <form class=\"form-signin\" [formGroup]=\"signinForm\" (ngSubmit)=\"loginUser()\">\n                    <div class=\"card-header\">\n                        <h3 class=\"h3 mb-3 font-weight-normal text-center\">Please sign in</h3>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"form-group\">\n                            <label>Email</label>\n                            <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Enter email\"\n                                required>\n                        </div>\n                        <div class=\"form-group\">\n                            <label>Password</label>\n                            <input type=\"password\" class=\"form-control\" formControlName=\"password\"\n                                placeholder=\"Password\">\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-block btn-primary\">Sign in</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { EmployeeCreateComponent } from './components/employee-create/employee-create.component';\r\nimport { EmployeeListComponent } from './components/employee-list/employee-list.component';\r\nimport { EmployeeEditComponent } from './components/employee-edit/employee-edit.component';\r\n\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { AuthInterceptor } from './shared/authconfig.interceptor'\r\nimport { ApiService } from './service/api.service';\r\nimport { SigninComponent } from './components/signin/signin.component';\r\nimport { SignupComponent } from './components/signup/signup.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    EmployeeCreateComponent,\r\n    EmployeeListComponent,\r\n    EmployeeEditComponent,\r\n    SigninComponent,\r\n    SignupComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [{\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AuthInterceptor,\r\n    multi: true\r\n  },\r\n    ApiService],\r\n  bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }","import { Injectable } from \"@angular/core\";\r\nimport { HttpInterceptor, HttpRequest, HttpHandler } from \"@angular/common/http\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable()\r\n\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    constructor(private authService: AuthService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        const authToken = this.authService.getToken();\r\n        req = req.clone({\r\n            setHeaders: {\r\n                Authorization: \"Bearer \" + authToken\r\n            }\r\n        });\r\n        return next.handle(req);\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { SigninComponent } from './components/signin/signin.component';\r\nimport { SignupComponent } from './components/signup/signup.component';\r\nimport { EmployeeCreateComponent } from './components/employee-create/employee-create.component';\r\nimport { EmployeeListComponent } from './components/employee-list/employee-list.component';\r\nimport { EmployeeEditComponent } from './components/employee-edit/employee-edit.component';\r\n\r\nimport { AuthGuard } from \"./shared/auth.guard\";\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'create-employee' },\r\n  { path: 'log-in', component: SigninComponent },\r\n  { path: 'sign-up', component: SignupComponent },\r\n  { path: 'create-employee', component: EmployeeCreateComponent },\r\n  { path: 'edit-employee/:id', component: EmployeeEditComponent },\r\n  { path: 'employees-list', component: EmployeeListComponent }  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}